// 文件路径: /Thanatos/daemon/rust/src/lib.rs

// --- Crate-level attributes and module imports ---
#![allow(clippy::needless_lifetimes)]
use cxx::UniquePtr;
use std::sync::{Arc};
use once_cell::sync::OnceCell;

// CXX FFI bridge module
#[path = "ffi.rs"]
mod ffi;

// Internal logic modules
mod config_manager;
mod event_logger;
mod execution_manager;
mod logic_controller;
mod ml_collector;
use logic_controller::LogicController;

// gRPC generated types module
mod grpc_generated {
    pub mod thanatos {
        pub mod ipc {
            // This includes the code generated by tonic-build from thanatos.proto
            tonic::include_proto!("thanatos.ipc");
        }
    }
}
use grpc_generated::thanatos::ipc as grpc_ipc;

// Global instance of our controller, initialized once.
static CONTROLLER_INSTANCE: OnceCell<Arc<LogicController>> = OnceCell::new();

// --- FFI Implementations ---

fn rust_init_controller(db_path: &str) -> UniquePtr<LogicController> {
    // Initialize logger, ignoring errors if it's already initialized.
    env_logger::builder()
        .filter_level(log::LevelFilter::Info)
        .try_init()
        .ok();

    log::info!("[Rust] Initializing controller with DB at: {}", db_path);

    let config_manager = Arc::new(config_manager::ConfigManager::new(db_path).expect("Failed to open DB"));
    let db_conn_clone = config_manager.conn.clone();
    
    let event_logger = Arc::new(event_logger::EventLogger::new(db_conn_clone.clone()));
    event_logger.init_db().expect("Failed to init event_log table");
    
    let ml_collector = Arc::new(ml_collector::MLDataCollector::new(db_conn_clone));
    ml_collector.init_db().expect("Failed to init ai_training_data table");

    let controller = LogicController::new(config_manager, event_logger, ml_collector);
    
    UniquePtr::new(controller)
}
